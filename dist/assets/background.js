import{p as y}from"./textProcessor.js";const l=["algorithm","API","database","framework","function","method","object","class","variable","loop","condition","array","string","integer","boolean","null","undefined","callback","promise","async","await","module","package","library","dependency","version","deployment","production","development","testing","debugging","optimization","performance","security","authentication","authorization","encryption","compression","caching","scaling","microservices","monolith","frontend","backend","fullstack","responsive","accessibility","SEO"],w=["Object-Oriented Programming","Functional Programming","Procedural Programming","Event-Driven Programming","Reactive Programming","Declarative Programming","Imperative Programming","SOLID Principles","DRY Principle","KISS Principle","Design Patterns","Data Structures","Algorithms","Big O Notation","Memory Management","Garbage Collection","Threading","Concurrency","Asynchronous Programming","Error Handling","Logging","Monitoring"],v=[{id:"fallback_1",question:"What is this page about?",answer:"This page contains general information relevant to the user. The content has been extracted but could not be automatically summarized.",type:"concept",difficulty:"easy",tags:["general","fallback"],readingTime:"3 sec"},{id:"fallback_2",question:"What can the user do with this extension?",answer:"Extract text from web pages, summarize content, generate flashcards for learning, and analyze page content for better understanding.",type:"concept",difficulty:"easy",tags:["extension","fallback"],readingTime:"3 sec"},{id:"fallback_3",question:"How does text extraction work?",answer:"The extension identifies main content areas, removes navigation elements, and extracts clean text while avoiding ads, footers, and sidebars.",type:"process",difficulty:"medium",tags:["extraction","fallback"],readingTime:"3 sec"},{id:"fallback_4",question:"What types of content can be processed?",answer:"Articles, documentation, tutorials, blog posts, and any text-based content. The extension works best with structured, informative content.",type:"fact",difficulty:"easy",tags:["content","fallback"],readingTime:"3 sec"},{id:"fallback_5",question:"How can I use the text-to-speech feature?",answer:"Click the 🔊 Speak Summary button to have the page summary read aloud using your browser's text-to-speech capabilities.",type:"process",difficulty:"easy",tags:["speech","fallback"],readingTime:"3 sec"},{id:"fallback_6",question:"What are the different flashcard types?",answer:"Definition cards explain terms, concept cards cover ideas, fact cards present information, and process cards describe how things work.",type:"concept",difficulty:"medium",tags:["flashcards","fallback"],readingTime:"3 sec"}];function S(n){const t=c(n),e=T(n),i=x(n),a={text:k(t),keyPoints:A(t),topics:e,difficulty:i,confidence:C(n)};let o=E(n,e,i),r=!1;return(!o||o.length===0||a.confidence<.3)&&(o=[...v],r=!0,console.log("Starlet25: Using fallback flashcards due to low confidence or no content")),{summary:a,flashcards:o,generatedAt:Date.now(),isFallback:r}}function c(n){return n.split(/[.!?]+/).map(t=>t.trim()).filter(t=>t.length>10&&t.length<200).slice(0,20)}function h(n){return n.toLowerCase().replace(/[^\w\s]/g,"").split(/\s+/).filter(t=>t.length>3).filter(t=>!["this","that","with","have","will","from","they","know","want","been","good","much","some","time","very","when","come","just","into","than","more","other","about","many","then","them","these","people","only","well","also","over","still","take","every","think","here","again","another","around","because","before","should","through","during","first","going","great","might","never","often","place","right","small","sound","their","there","those","under","until","water","where","which","while","world","years","after","being","could","every","found","going","having","large","learn","never","other","place","right","small","sound","their","there","those","under","until","water","where","which","while","world","years"].includes(t))}function T(n){const t=[],e=n.toLowerCase();return l.some(i=>e.includes(i))&&t.push("Programming"),w.some(i=>e.includes(i.toLowerCase()))&&t.push("Software Development"),(e.includes("api")||e.includes("endpoint"))&&t.push("APIs"),(e.includes("database")||e.includes("sql")||e.includes("query"))&&t.push("Databases"),(e.includes("react")||e.includes("vue")||e.includes("angular"))&&t.push("Frontend Frameworks"),(e.includes("node")||e.includes("express")||e.includes("server"))&&t.push("Backend Development"),(e.includes("test")||e.includes("testing")||e.includes("unit"))&&t.push("Testing"),(e.includes("deploy")||e.includes("production")||e.includes("hosting"))&&t.push("Deployment"),(e.includes("security")||e.includes("authentication")||e.includes("encryption"))&&t.push("Security"),t.length===0&&t.push("General"),t.slice(0,3)}function x(n){const t=h(n),e=t.reduce((r,s)=>r+s.length,0)/t.length,i=c(n).length,a=l.filter(r=>n.toLowerCase().includes(r)).length;let o=0;return o+=e>8?2:e>6?1:0,o+=i>15?2:i>10?1:0,o+=a>5?2:a>2?1:0,o>=5?"hard":o>=2?"medium":"easy"}function C(n){const t=h(n),e=c(n);let i=.5;return t.length>100&&(i+=.2),e.length>5&&(i+=.1),l.some(a=>n.toLowerCase().includes(a))&&(i+=.1),(n.includes("function")||n.includes("class")||n.includes("method"))&&(i+=.1),Math.min(i,1)}function k(n){if(n.length===0)return"No content available for summarization.";const t=n.filter(i=>i.length>20&&i.length<120).slice(0,3).map(i=>i.replace(/\b(this|that|these|those|it|they|them)\b/gi,"").replace(/\b(is|are|was|were)\s+(a|an|the)\s+/gi,"is ").replace(/\s+/g," ").trim());if(t.length===0)return n[0]||"Content extracted but too short for meaningful summary.";let e=t.join(". ");return e.endsWith(".")||(e+="."),e.length>200&&(e=e.substring(0,197)+"..."),e}function A(n){return n.filter(t=>t.length>20&&t.length<100).slice(0,4).map(t=>t.replace(/\b(this|that|these|those)\b/gi,"").replace(/\s+/g," ").trim().substring(0,80))}function E(n,t,e){const i=[],a=P(n,t,e);i.push(...a);const o=q(n,t,e);return i.push(...o),i.slice(0,12)}function P(n,t,e){const i=[];c(n).slice(0,4).forEach((r,s)=>{const f=b(r),u=d(r);i.push({id:`qa_simple_${s}`,question:f,answer:u,type:"concept",difficulty:e,tags:[...t,"qa"],readingTime:g(u)})});const o=l.find(r=>n.toLowerCase().includes(r));if(o){const r=d(D(o,n));i.push({id:`qa_def_${o}`,question:`What is ${o}?`,answer:r,type:"definition",difficulty:e,tags:[...t,"definition","qa"],readingTime:g(r)})}return i.slice(0,5)}function q(n,t,e){const i=[];c(n).slice(4,7).forEach((s,f)=>{const u=b(s),p=d(s);i.push({id:`rev_simple_${f}`,question:u,answer:p,type:"fact",difficulty:e,tags:[...t,"revision"],readingTime:g(p)})});const r=h(n).find(s=>l.includes(s));if(r){const s=d(_(r));i.push({id:`rev_keyword_${r}`,question:`Define: ${r}`,answer:s,type:"definition",difficulty:e,tags:[...t,"keyword","revision"],readingTime:g(s)})}return i.slice(0,3)}function _(n){return{api:"Interface for software communication",function:"Reusable code block",variable:"Data storage container",class:"Object blueprint",method:"Class function",object:"Class instance",array:"Ordered data collection",string:"Text sequence",database:"Structured data storage",framework:"Development foundation",algorithm:"Problem-solving steps",loop:"Repeated execution",condition:"Decision logic",callback:"Function reference",promise:"Async operation result",module:"Code organization unit",package:"Dependency bundle",library:"Reusable code collection",dependency:"Required external code",deployment:"Application release",testing:"Code verification",debugging:"Error fixing",optimization:"Performance improvement",security:"Protection measures",authentication:"User verification",encryption:"Data protection",caching:"Temporary storage",scaling:"Performance expansion",frontend:"User interface",backend:"Server logic",responsive:"Adaptive design",accessibility:"Universal access",seo:"Search optimization"}[n.toLowerCase()]||`${n}: technical concept`}function D(n,t){const i=c(t).find(o=>o.toLowerCase().includes(n.toLowerCase()));return i||{api:"An Application Programming Interface (API) is a set of rules and protocols that allows different software applications to communicate with each other.",function:"A function is a reusable block of code that performs a specific task and can be called from other parts of the program.",variable:"A variable is a container that stores data values and can be referenced and manipulated throughout a program.",class:"A class is a blueprint for creating objects that defines their properties and methods.",method:"A method is a function that belongs to a class or object and defines the behavior of that class or object.",object:"An object is an instance of a class that contains data and code to manipulate that data.",array:"An array is a data structure that stores a collection of elements in a specific order.",string:"A string is a sequence of characters used to represent text in programming.",database:"A database is an organized collection of structured information or data stored electronically.",framework:"A framework is a pre-built structure that provides a foundation for developing applications."}[n.toLowerCase()]||`${n} is a technical concept used in software development.`}function b(n){if(/\b(is|are|was|were|means|refers to|describes|defines)\b/i.test(n)){const e=n.match(/^(.*?)\b(is|are|was|were|means|refers to|describes|defines)\b/i);if(e&&e[1])return`What is ${e[1].trim()}?`}const t=n.split(" ")[0];return t&&t.length<15?`What about ${t}?`:"What is this about?"}function d(n){const t=[[/utilizes?/gi,"uses"],[/initialization/gi,"starting"],[/implementation/gi,"how it works"],[/functionality/gi,"feature"],[/methodology/gi,"method"],[/individuals?/gi,"people"],[/commonly/gi,"often"],[/in order to/gi,"to"],[/prior to/gi,"before"],[/subsequent/gi,"next"],[/obtain/gi,"get"],[/demonstrates?/gi,"shows"],[/approximately/gi,"about"],[/assistance/gi,"help"],[/modification/gi,"change"],[/numerous/gi,"many"],[/various/gi,"different"],[/indicates?/gi,"shows"],[/facilitates?/gi,"helps"],[/commences?/gi,"starts"],[/terminates?/gi,"ends"],[/subsequently/gi,"then"],[/consequently/gi,"so"],[/therefore/gi,"so"],[/additionally/gi,"also"],[/approximately/gi,"about"],[/sufficient/gi,"enough"],[/insufficient/gi,"not enough"],[/advantageous/gi,"helpful"],[/disadvantageous/gi,"not helpful"],[/commonly/gi,"often"],[/frequently/gi,"often"],[/subsequent/gi,"next"],[/prior/gi,"before"],[/obtain/gi,"get"],[/demonstrate/gi,"show"],[/approximately/gi,"about"],[/assistance/gi,"help"],[/modification/gi,"change"],[/numerous/gi,"many"],[/various/gi,"different"],[/indicates?/gi,"shows"],[/facilitates?/gi,"helps"],[/commences?/gi,"starts"],[/terminates?/gi,"ends"],[/subsequently/gi,"then"],[/consequently/gi,"so"],[/therefore/gi,"so"],[/additionally/gi,"also"],[/approximately/gi,"about"],[/sufficient/gi,"enough"],[/insufficient/gi,"not enough"],[/advantageous/gi,"helpful"],[/disadvantageous/gi,"not helpful"]];let e=n;for(const[i,a]of t)e=e.replace(i,a);return e=e.replace(/\s+/g," ").trim(),e.length>120&&(e=e.slice(0,117)+"..."),e}function g(n){const t=n.split(/\s+/).length;return`${Math.max(1,Math.round(t/3))} sec`}async function m(n){try{await chrome.scripting.executeScript({target:{tabId:n},files:["assets/content.js"]}),console.log("✅ Starlet25: Content script injected into tab",n)}catch(t){throw console.error("❌ Starlet25: Failed to inject content script:",t),t}}chrome.runtime.onMessage.addListener((n,t,e)=>{n.type==="PAGE_TEXT"&&(console.log(`[${new Date().toISOString()}] Extracted summary:`,n.text.slice(0,200)),e({success:!0}))});chrome.runtime.onMessage.addListener((n,t,e)=>{if(n.action==="PING")return console.log("Starlet25: Received PING request"),e({success:!0,message:"Starlet25 extension is running"}),!0;if(n.action==="EXTRACT_CURRENT_PAGE")return console.log("Starlet25: Received EXTRACT_CURRENT_PAGE request"),chrome.tabs.query({active:!0,currentWindow:!0},async i=>{const a=i[0];if(!a?.id){console.error("Starlet25: No active tab found for EXTRACT_CURRENT_PAGE"),e({success:!1,error:"No active tab found"});return}try{console.log("Starlet25: Injecting content script for extraction"),await m(a.id),chrome.tabs.sendMessage(a.id,{action:"EXTRACT_TEXT"},o=>{if(chrome.runtime.lastError)console.warn("⚠️ Starlet25: Content script not ready",chrome.runtime.lastError.message),e({success:!1,error:"Content script not ready"});else if(o&&o.text){console.log("✅ Starlet25: Got response from content script",o);const r=y(o.text),s=S(o.text);console.log("Starlet25: Sending successful response"),e({success:!0,text:o.text,processed:r,summarization:s})}else console.log("Starlet25: No text extracted from content script"),e({success:!1,error:"No text extracted"})})}catch(o){console.error("❌ Starlet25: Failed to inject content script for extraction:",o),e({success:!1,error:"Content script injection failed"})}}),!0});chrome.runtime.onInstalled.addListener(()=>{console.log("Starlet25: Extension installed")});chrome.commands.onCommand.addListener(async n=>{if(n==="extract-text"){console.log("Starlet25: Ctrl+Alt+S received in background script");try{const[t]=await chrome.tabs.query({active:!0,currentWindow:!0});if(console.log("Starlet25: Active tab found:",t?.id,t?.url),t?.id)try{console.log("Starlet25: Injecting content script..."),await m(t.id),console.log("Starlet25: Content script injected, sending EXTRACT_TEXT message"),chrome.tabs.sendMessage(t.id,{action:"EXTRACT_TEXT"},e=>{console.log("Starlet25: Received response from content script:",e),chrome.runtime.lastError?console.warn("⚠️ Starlet25: Content script not ready",chrome.runtime.lastError.message):e&&e.success?console.log("✅ Starlet25: Text extraction started successfully"):console.error("❌ Starlet25: Failed to extract text - response:",e)})}catch(e){console.error("❌ Starlet25: Error extracting text",e)}else console.error("❌ Starlet25: No active tab found")}catch(t){console.error("❌ Starlet25: Error handling text extraction shortcut",t)}}});chrome.tabs.onUpdated.addListener((n,t,e)=>{t.status==="complete"&&e.url&&e.url.startsWith("http")&&(console.log(`Starlet25: Tab ${n} completed loading: ${e.url}`),setTimeout(async()=>{try{await m(n),console.log(`Starlet25: Content script injected on tab ${n}`)}catch(i){console.log(`ℹ️ Starlet25: Content script already injected or injection failed on tab ${n}:`,i)}},1e3))});
