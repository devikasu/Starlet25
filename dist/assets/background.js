import{p as f}from"./textProcessor.js";const h=["algorithm","API","database","framework","function","method","object","class","variable","loop","condition","array","string","integer","boolean","null","undefined","callback","promise","async","await","module","package","library","dependency","version","deployment","production","development","testing","debugging","optimization","performance","security","authentication","authorization","encryption","compression","caching","scaling","microservices","monolith","frontend","backend","fullstack","responsive","accessibility","SEO"],w=["Object-Oriented Programming","Functional Programming","Procedural Programming","Event-Driven Programming","Reactive Programming","Declarative Programming","Imperative Programming","SOLID Principles","DRY Principle","KISS Principle","Design Patterns","Data Structures","Algorithms","Big O Notation","Memory Management","Garbage Collection","Threading","Concurrency","Asynchronous Programming","Error Handling","Logging","Monitoring"],y=[{id:"fallback_1",question:"What is this page about?",answer:"This page contains general information relevant to the user. The content has been extracted but could not be automatically summarized.",type:"concept",difficulty:"easy",tags:["general","fallback"]},{id:"fallback_2",question:"What can the user do with this extension?",answer:"Extract text from web pages, summarize content, generate flashcards for learning, and analyze page content for better understanding.",type:"concept",difficulty:"easy",tags:["extension","fallback"]},{id:"fallback_3",question:"How does text extraction work?",answer:"The extension identifies main content areas, removes navigation elements, and extracts clean text while avoiding ads, footers, and sidebars.",type:"process",difficulty:"medium",tags:["extraction","fallback"]},{id:"fallback_4",question:"What types of content can be processed?",answer:"Articles, documentation, tutorials, blog posts, and any text-based content. The extension works best with structured, informative content.",type:"fact",difficulty:"easy",tags:["content","fallback"]},{id:"fallback_5",question:"How can I use the text-to-speech feature?",answer:"Click the ðŸ”Š Speak Summary button to have the page summary read aloud using your browser's text-to-speech capabilities.",type:"process",difficulty:"easy",tags:["speech","fallback"]},{id:"fallback_6",question:"What are the different flashcard types?",answer:"Definition cards explain terms, concept cards cover ideas, fact cards present information, and process cards describe how things work.",type:"concept",difficulty:"medium",tags:["flashcards","fallback"]}];function m(t){const n=d(t),e=b(t),a=x(t),s={text:T(n),keyPoints:k(n),topics:e,difficulty:a,confidence:v(t)};let r=S(t,e,a),i=!1;return(!r||r.length===0||s.confidence<.3)&&(r=[...y],i=!0,console.log("Starlet25: Using fallback flashcards due to low confidence or no content")),{summary:s,flashcards:r,generatedAt:Date.now(),isFallback:i}}function d(t){return t.split(/[.!?]+/).map(n=>n.trim()).filter(n=>n.length>10&&n.length<200).slice(0,20)}function g(t){return t.toLowerCase().replace(/[^\w\s]/g,"").split(/\s+/).filter(n=>n.length>3).filter(n=>!["this","that","with","have","will","from","they","know","want","been","good","much","some","time","very","when","come","just","into","than","more","other","about","many","then","them","these","people","only","well","also","over","still","take","every","think","here","again","another","around","because","before","should","through","during","first","going","great","might","never","often","place","right","small","sound","their","there","those","under","until","water","where","which","while","world","years","after","being","could","every","found","going","having","large","learn","never","other","place","right","small","sound","their","there","those","under","until","water","where","which","while","world","years"].includes(n))}function b(t){const n=[],e=t.toLowerCase();return h.some(a=>e.includes(a))&&n.push("Programming"),w.some(a=>e.includes(a.toLowerCase()))&&n.push("Software Development"),(e.includes("api")||e.includes("endpoint"))&&n.push("APIs"),(e.includes("database")||e.includes("sql")||e.includes("query"))&&n.push("Databases"),(e.includes("react")||e.includes("vue")||e.includes("angular"))&&n.push("Frontend Frameworks"),(e.includes("node")||e.includes("express")||e.includes("server"))&&n.push("Backend Development"),(e.includes("test")||e.includes("testing")||e.includes("unit"))&&n.push("Testing"),(e.includes("deploy")||e.includes("production")||e.includes("hosting"))&&n.push("Deployment"),(e.includes("security")||e.includes("authentication")||e.includes("encryption"))&&n.push("Security"),n.length===0&&n.push("General"),n.slice(0,3)}function x(t){const n=g(t),e=n.reduce((i,c)=>i+c.length,0)/n.length,a=d(t).length,s=h.filter(i=>t.toLowerCase().includes(i)).length;let r=0;return r+=e>8?2:e>6?1:0,r+=a>15?2:a>10?1:0,r+=s>5?2:s>2?1:0,r>=5?"hard":r>=2?"medium":"easy"}function v(t){const n=g(t),e=d(t);let a=.5;return n.length>100&&(a+=.2),e.length>5&&(a+=.1),h.some(s=>t.toLowerCase().includes(s))&&(a+=.1),(t.includes("function")||t.includes("class")||t.includes("method"))&&(a+=.1),Math.min(a,1)}function T(t){if(t.length===0)return"No content available for summarization.";const n=t.filter(e=>e.length>20).slice(0,3);return n.length===0?t[0]||"Content extracted but too short for meaningful summary.":n.join(" ")+"."}function k(t){return t.filter(n=>n.length>30&&n.length<150).slice(0,5).map(n=>n.trim())}function S(t,n,e){const a=[],s=d(t);return h.filter(o=>t.toLowerCase().includes(o)).slice(0,3).forEach((o,u)=>{a.push({id:`def_${u}`,question:`What is ${o}?`,answer:E(o,t),type:"definition",difficulty:e,tags:[...n,"definition"]})}),s.filter(o=>o.length>40&&o.length<120).slice(0,2).forEach((o,u)=>{const l=A(o);l&&a.push({id:`concept_${u}`,question:`Explain the concept of ${l}.`,answer:o,type:"concept",difficulty:e,tags:[...n,"concept"]})}),s.filter(o=>o.includes("is")||o.includes("are")||o.includes("was")||o.includes("were")).slice(0,2).forEach((o,u)=>{const l=C(o);l&&a.push({id:`fact_${u}`,question:`What is ${l}?`,answer:o,type:"fact",difficulty:e,tags:[...n,"fact"]})}),s.filter(o=>o.includes("step")||o.includes("process")||o.includes("method")||o.includes("procedure")).slice(0,1).forEach((o,u)=>{const l=_(o);l&&a.push({id:`process_${u}`,question:`What are the steps to ${l}?`,answer:o,type:"process",difficulty:e,tags:[...n,"process"]})}),a.slice(0,8)}function E(t,n){const a=d(n).find(r=>r.toLowerCase().includes(t.toLowerCase()));return a||{api:"An Application Programming Interface (API) is a set of rules and protocols that allows different software applications to communicate with each other.",function:"A function is a reusable block of code that performs a specific task and can be called from other parts of the program.",variable:"A variable is a container that stores data values and can be referenced and manipulated throughout a program.",class:"A class is a blueprint for creating objects that defines their properties and methods.",method:"A method is a function that belongs to a class or object and defines the behavior of that class or object.",object:"An object is an instance of a class that contains data and code to manipulate that data.",array:"An array is a data structure that stores a collection of elements in a specific order.",string:"A string is a sequence of characters used to represent text in programming.",database:"A database is an organized collection of structured information or data stored electronically.",framework:"A framework is a pre-built structure that provides a foundation for developing applications."}[t.toLowerCase()]||`${t} is a technical concept used in software development.`}function A(t){const n=[/the concept of (\w+)/i,/(\w+) is a/i,/(\w+) refers to/i,/(\w+) means/i];for(const e of n){const a=t.match(e);if(a)return a[1]}return null}function C(t){const n=[/(\w+) is (\w+)/i,/(\w+) are (\w+)/i,/(\w+) was (\w+)/i,/(\w+) were (\w+)/i];for(const e of n){const a=t.match(e);if(a)return a[1]}return null}function _(t){const n=[/the (\w+) process/i,/(\w+) procedure/i,/(\w+) method/i,/steps to (\w+)/i];for(const e of n){const a=t.match(e);if(a)return a[1]}return null}async function p(t){try{const n=`page_text_${Date.now()}`,e=f(t.text),a=m(t.text),s={text:t.text,url:t.url,title:t.title,timestamp:t.timestamp,processed:e,summarization:a};await chrome.storage.local.set({[n]:s});const r=await chrome.storage.local.get(null),i=Object.keys(r).filter(c=>c.startsWith("page_text_"));if(i.length>10){const c=i.sort().slice(0,i.length-10);await chrome.storage.local.remove(c)}console.log(`[${new Date().toISOString()}] Extracted summary:`,t.text.slice(0,200)),console.log(`[${new Date().toISOString()}] Processed stats:`,{wordCount:e.wordCount,readingTime:e.estimatedReadingTime,language:e.language,hasCode:e.hasCode,hasLinks:e.hasLinks}),console.log(`[${new Date().toISOString()}] Generated ${a.flashcards.length} flashcards and summary with ${Math.round(a.summary.confidence*100)}% confidence${a.isFallback?" (FALLBACK USED)":""}`)}catch(n){console.error("Starlet25: Error storing text:",n)}}chrome.runtime.onMessage.addListener((t,n,e)=>{t.type==="PAGE_TEXT"&&(console.log(`[${new Date().toISOString()}] Extracted summary:`,t.text.slice(0,200)),p(t),e({success:!0}))});chrome.runtime.onMessage.addListener((t,n,e)=>{if(t.action==="GET_STORED_TEXTS")return chrome.storage.local.get(null).then(a=>{const s=Object.entries(a).filter(([r])=>r.startsWith("page_text_")).map(([r,i])=>({id:r,...i})).sort((r,i)=>i.timestamp-r.timestamp);e({texts:s})}),!0;if(t.action==="CLEAR_STORED_TEXTS")return chrome.storage.local.get(null).then(a=>{const s=Object.keys(a).filter(r=>r.startsWith("page_text_"));chrome.storage.local.remove(s).then(()=>{e({success:!0})})}),!0;if(t.action==="EXTRACT_CURRENT_PAGE")return chrome.tabs.query({active:!0,currentWindow:!0},a=>{a[0]?.id?chrome.tabs.sendMessage(a[0].id,{action:"EXTRACT_TEXT"},s=>{if(s&&s.text){const r=f(s.text),i=m(s.text),c={type:"PAGE_TEXT",text:s.text,url:s.url,title:s.title,timestamp:Date.now()};p(c),e({success:!0,text:s.text,processed:r,summarization:i})}else e({success:!1,error:"No text extracted"})}):e({success:!1,error:"No active tab found"})}),!0});chrome.runtime.onInstalled.addListener(()=>{console.log("Starlet25: Extension installed")});chrome.tabs.onUpdated.addListener((t,n,e)=>{n.status==="complete"&&e.url&&e.url.startsWith("http")&&setTimeout(()=>{chrome.tabs.sendMessage(t,{action:"EXTRACT_TEXT"}).catch(()=>{})},1e3)});
