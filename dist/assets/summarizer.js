const u=["algorithm","API","database","framework","function","method","object","class","variable","loop","condition","array","string","integer","boolean","null","undefined","callback","promise","async","await","module","package","library","dependency","version","deployment","production","development","testing","debugging","optimization","performance","security","authentication","authorization","encryption","compression","caching","scaling","microservices","monolith","frontend","backend","fullstack","responsive","accessibility","SEO"],b=["Object-Oriented Programming","Functional Programming","Procedural Programming","Event-Driven Programming","Reactive Programming","Declarative Programming","Imperative Programming","SOLID Principles","DRY Principle","KISS Principle","Design Patterns","Data Structures","Algorithms","Big O Notation","Memory Management","Garbage Collection","Threading","Concurrency","Asynchronous Programming","Error Handling","Logging","Monitoring"],y=[{id:"fallback_1",question:"What is this page about?",answer:"This page contains general information relevant to the user. The content has been extracted but could not be automatically summarized.",type:"concept",difficulty:"easy",tags:["general","fallback"],readingTime:"3 sec"},{id:"fallback_2",question:"What can the user do with this extension?",answer:"Extract text from web pages, summarize content, generate flashcards for learning, and analyze page content for better understanding.",type:"concept",difficulty:"easy",tags:["extension","fallback"],readingTime:"3 sec"},{id:"fallback_3",question:"How does text extraction work?",answer:"The extension identifies main content areas, removes navigation elements, and extracts clean text while avoiding ads, footers, and sidebars.",type:"process",difficulty:"medium",tags:["extraction","fallback"],readingTime:"3 sec"},{id:"fallback_4",question:"What types of content can be processed?",answer:"Articles, documentation, tutorials, blog posts, and any text-based content. The extension works best with structured, informative content.",type:"fact",difficulty:"easy",tags:["content","fallback"],readingTime:"3 sec"},{id:"fallback_5",question:"How can I use the text-to-speech feature?",answer:"Click the ðŸ”Š Speak Summary button to have the page summary read aloud using your browser's text-to-speech capabilities.",type:"process",difficulty:"easy",tags:["speech","fallback"],readingTime:"3 sec"},{id:"fallback_6",question:"What are the different flashcard types?",answer:"Definition cards explain terms, concept cards cover ideas, fact cards present information, and process cards describe how things work.",type:"concept",difficulty:"medium",tags:["flashcards","fallback"],readingTime:"3 sec"}];function S(n){const e=c(n),t=w(n),i=v(n),s={text:A(e),keyPoints:C(e),topics:t,difficulty:i,confidence:k(n)};let a=T(n,t,i),o=!1;return(!a||a.length===0||s.confidence<.3)&&(a=[...y],o=!0,console.log("Starlet25: Using fallback flashcards due to low confidence or no content")),{summary:s,flashcards:a,generatedAt:Date.now(),isFallback:o}}function c(n){return n.split(/[.!?]+/).map(e=>e.trim()).filter(e=>e.length>10&&e.length<200).slice(0,20)}function h(n){return n.toLowerCase().replace(/[^\w\s]/g,"").split(/\s+/).filter(e=>e.length>3).filter(e=>!["this","that","with","have","will","from","they","know","want","been","good","much","some","time","very","when","come","just","into","than","more","other","about","many","then","them","these","people","only","well","also","over","still","take","every","think","here","again","another","around","because","before","should","through","during","first","going","great","might","never","often","place","right","small","sound","their","there","those","under","until","water","where","which","while","world","years","after","being","could","every","found","going","having","large","learn","never","other","place","right","small","sound","their","there","those","under","until","water","where","which","while","world","years"].includes(e))}function w(n){const e=[],t=n.toLowerCase();return u.some(i=>t.includes(i))&&e.push("Programming"),b.some(i=>t.includes(i.toLowerCase()))&&e.push("Software Development"),(t.includes("api")||t.includes("endpoint"))&&e.push("APIs"),(t.includes("database")||t.includes("sql")||t.includes("query"))&&e.push("Databases"),(t.includes("react")||t.includes("vue")||t.includes("angular"))&&e.push("Frontend Frameworks"),(t.includes("node")||t.includes("express")||t.includes("server"))&&e.push("Backend Development"),(t.includes("test")||t.includes("testing")||t.includes("unit"))&&e.push("Testing"),(t.includes("deploy")||t.includes("production")||t.includes("hosting"))&&e.push("Deployment"),(t.includes("security")||t.includes("authentication")||t.includes("encryption"))&&e.push("Security"),e.length===0&&e.push("General"),e.slice(0,3)}function v(n){const e=h(n),t=e.reduce((o,r)=>o+r.length,0)/e.length,i=c(n).length,s=u.filter(o=>n.toLowerCase().includes(o)).length;let a=0;return a+=t>8?2:t>6?1:0,a+=i>15?2:i>10?1:0,a+=s>5?2:s>2?1:0,a>=5?"hard":a>=2?"medium":"easy"}function k(n){const e=h(n),t=c(n);let i=.5;return e.length>100&&(i+=.2),t.length>5&&(i+=.1),u.some(s=>n.toLowerCase().includes(s))&&(i+=.1),(n.includes("function")||n.includes("class")||n.includes("method"))&&(i+=.1),Math.min(i,1)}function A(n){if(n.length===0)return"No content available for summarization.";const e=n.filter(i=>i.length>20&&i.length<120).slice(0,3).map(i=>i.replace(/\b(this|that|these|those|it|they|them)\b/gi,"").replace(/\b(is|are|was|were)\s+(a|an|the)\s+/gi,"is ").replace(/\s+/g," ").trim());if(e.length===0)return n[0]||"Content extracted but too short for meaningful summary.";let t=e.join(". ");return t.endsWith(".")||(t+="."),t.length>200&&(t=t.substring(0,197)+"..."),t}function C(n){return n.filter(e=>e.length>20&&e.length<100).slice(0,4).map(e=>e.replace(/\b(this|that|these|those)\b/gi,"").replace(/\s+/g," ").trim().substring(0,80))}function T(n,e,t){const i=[],s=P(n,e,t);i.push(...s);const a=x(n,e,t);return i.push(...a),i.slice(0,12)}function P(n,e,t){const i=[];c(n).slice(0,4).forEach((o,r)=>{const f=p(o),d=l(o);i.push({id:`qa_simple_${r}`,question:f,answer:d,type:"concept",difficulty:t,tags:[...e,"qa"],readingTime:g(d)})});const a=u.find(o=>n.toLowerCase().includes(o));if(a){const o=l(D(a,n));i.push({id:`qa_def_${a}`,question:`What is ${a}?`,answer:o,type:"definition",difficulty:t,tags:[...e,"definition","qa"],readingTime:g(o)})}return i.slice(0,5)}function x(n,e,t){const i=[];c(n).slice(4,7).forEach((r,f)=>{const d=p(r),m=l(r);i.push({id:`rev_simple_${f}`,question:d,answer:m,type:"fact",difficulty:t,tags:[...e,"revision"],readingTime:g(m)})});const o=h(n).find(r=>u.includes(r));if(o){const r=l(q(o));i.push({id:`rev_keyword_${o}`,question:`Define: ${o}`,answer:r,type:"definition",difficulty:t,tags:[...e,"keyword","revision"],readingTime:g(r)})}return i.slice(0,3)}function q(n){return{api:"Interface for software communication",function:"Reusable code block",variable:"Data storage container",class:"Object blueprint",method:"Class function",object:"Class instance",array:"Ordered data collection",string:"Text sequence",database:"Structured data storage",framework:"Development foundation",algorithm:"Problem-solving steps",loop:"Repeated execution",condition:"Decision logic",callback:"Function reference",promise:"Async operation result",module:"Code organization unit",package:"Dependency bundle",library:"Reusable code collection",dependency:"Required external code",deployment:"Application release",testing:"Code verification",debugging:"Error fixing",optimization:"Performance improvement",security:"Protection measures",authentication:"User verification",encryption:"Data protection",caching:"Temporary storage",scaling:"Performance expansion",frontend:"User interface",backend:"Server logic",responsive:"Adaptive design",accessibility:"Universal access",seo:"Search optimization"}[n.toLowerCase()]||`${n}: technical concept`}function D(n,e){const i=c(e).find(a=>a.toLowerCase().includes(n.toLowerCase()));return i||{api:"An Application Programming Interface (API) is a set of rules and protocols that allows different software applications to communicate with each other.",function:"A function is a reusable block of code that performs a specific task and can be called from other parts of the program.",variable:"A variable is a container that stores data values and can be referenced and manipulated throughout a program.",class:"A class is a blueprint for creating objects that defines their properties and methods.",method:"A method is a function that belongs to a class or object and defines the behavior of that class or object.",object:"An object is an instance of a class that contains data and code to manipulate that data.",array:"An array is a data structure that stores a collection of elements in a specific order.",string:"A string is a sequence of characters used to represent text in programming.",database:"A database is an organized collection of structured information or data stored electronically.",framework:"A framework is a pre-built structure that provides a foundation for developing applications."}[n.toLowerCase()]||`${n} is a technical concept used in software development.`}function L(n){const e=[];return n.text&&e.push(n.text),n.keyPoints&&n.keyPoints.length>0&&n.keyPoints.forEach(t=>{t.length>10&&t.length<200&&e.push(t)}),e.length<3&&c(n.text).slice(0,5).forEach(i=>{const s=l(i);s.length>20&&s.length<150&&!e.includes(s)&&e.push(s)}),e.length===0&&(e.push("This page contains information that can help with learning."),e.push("The content has been extracted and summarized for easy reading."),e.push("Use these notes to review and remember key points.")),e.slice(0,8)}function p(n){if(/\b(is|are|was|were|means|refers to|describes|defines)\b/i.test(n)){const t=n.match(/^(.*?)\b(is|are|was|were|means|refers to|describes|defines)\b/i);if(t&&t[1])return`What is ${t[1].trim()}?`}const e=n.split(" ")[0];return e&&e.length<15?`What about ${e}?`:"What is this about?"}function l(n){const e=[[/utilizes?/gi,"uses"],[/initialization/gi,"starting"],[/implementation/gi,"how it works"],[/functionality/gi,"feature"],[/methodology/gi,"method"],[/individuals?/gi,"people"],[/commonly/gi,"often"],[/in order to/gi,"to"],[/prior to/gi,"before"],[/subsequent/gi,"next"],[/obtain/gi,"get"],[/demonstrates?/gi,"shows"],[/approximately/gi,"about"],[/assistance/gi,"help"],[/modification/gi,"change"],[/numerous/gi,"many"],[/various/gi,"different"],[/indicates?/gi,"shows"],[/facilitates?/gi,"helps"],[/commences?/gi,"starts"],[/terminates?/gi,"ends"],[/subsequently/gi,"then"],[/consequently/gi,"so"],[/therefore/gi,"so"],[/additionally/gi,"also"],[/approximately/gi,"about"],[/sufficient/gi,"enough"],[/insufficient/gi,"not enough"],[/advantageous/gi,"helpful"],[/disadvantageous/gi,"not helpful"],[/commonly/gi,"often"],[/frequently/gi,"often"],[/subsequent/gi,"next"],[/prior/gi,"before"],[/obtain/gi,"get"],[/demonstrate/gi,"show"],[/approximately/gi,"about"],[/assistance/gi,"help"],[/modification/gi,"change"],[/numerous/gi,"many"],[/various/gi,"different"],[/indicates?/gi,"shows"],[/facilitates?/gi,"helps"],[/commences?/gi,"starts"],[/terminates?/gi,"ends"],[/subsequently/gi,"then"],[/consequently/gi,"so"],[/therefore/gi,"so"],[/additionally/gi,"also"],[/approximately/gi,"about"],[/sufficient/gi,"enough"],[/insufficient/gi,"not enough"],[/advantageous/gi,"helpful"],[/disadvantageous/gi,"not helpful"]];let t=n;for(const[i,s]of e)t=t.replace(i,s);return t=t.replace(/\s+/g," ").trim(),t.length>120&&(t=t.slice(0,117)+"..."),t}function g(n){const e=n.split(/\s+/).length;return`${Math.max(1,Math.round(e/3))} sec`}export{L as g,S as s};
